// testing on 4.26.2022

#include "math.h"
#include <BluetoothSerial.h>

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

BluetoothSerial SerialBT;

// number of steps in an inch
#define INCH_STEPS = 60

// for altitude calculations...
#define JANUARY 31
#define FEBRUARY 28
#define MARCH 31
#define APRIL 30
#define MAY 31
#define JUNE 30
#define JULY 31
#define AUGUST 31
#define SEPTEMBER 30
#define OCTOBER 31
#define NOVEMBER 30
#define DECEMBER 31
float latitude = 0.0;
float localSolarTime = 0.0;
int daysSinceJan1st = 0;
int oldAltitude = 0;
float oldLatitude = 0.0;

// globals for app...
int autoMode = 1;
int manualMode = 0;
int manualHeight = 0;
int horizontalRange = 100;
const byte numChars = 32;
char receivedChars[numChars]; // an array to store the received data
boolean newData = false;
int numberOfBytes = 0;

void setup() {
  Serial.begin(115200);
  SerialBT.begin("SSVCompanion"); //start Bluetooth

  Serial.println("Welcome to the SSV. Open the SSV app to pair over Bluetooth.");
  Serial.println("Initializing in Auto Mode...");
  Serial.print("Horizontal Range = "); Serial.print(horizontalRange);
  Serial.println("%");
  Serial.print("Visor Height = "); Serial.print(manualHeight);
  Serial.println(" inches from the bottom of the enclosure.");
}


void loop() {
  recvWithEndMarker();
  convertAppSettings();
  //delay(1000);
  visorMovement(calculateAltitude());
}


// need
void recvWithEndMarker() {
  static byte ndx = 0;
  char endMarker = '\n';
  char rc;
 
  if (SerialBT.available() > 0) {
    rc = SerialBT.read();

    if (rc != endMarker) {
      receivedChars[ndx] = rc;
      ndx++;
      
      if (ndx >= numChars) {
          ndx = numChars - 1;
      }
      
    }
    else {
      receivedChars[ndx] = '\0'; // terminate the string
      
      for (int i = 0; i < ndx; i++) {
        Serial.print(receivedChars[i]);
      }
      
      Serial.println();
      numberOfBytes = ndx;
      ndx = 0;
      newData = true;
    }
  }
}


// need
void convertAppSettings() {
  
  int Day = 0;
  int Month = 0;
  int Year = 0;
  int Hour = 0;
  int Minute = 0;
  int Second = 0;
  
  // if there is new data available
  if (newData == true) {
    
    Serial.print("Size of data in bytes: ");
    Serial.println(numberOfBytes);
    
    // if the size of the character array is eight bytes, then it is either the date or
    // the latitude.
    if (numberOfBytes == 8) {
      
      // if there is a decimal in the first four elements, then it is the latitude.
      if ((receivedChars[1] == '.') || (receivedChars[2] == '.') 
          || (receivedChars[3] == '.')) {
                  
        Serial.println("Latitude incoming...");
        // go through each element and convert the array into a float
        for (int i = 0; i < numberOfBytes; i++) {
          switch (i) {
            case 0:
              // (x).xxxxxx
              if (receivedChars[1] == '.') {
                latitude = float(receivedChars[i] - '0');
              }
              // (x)x.xxxxx
              else if (receivedChars[2] == '.') {
                latitude = float(receivedChars[i] - '0') * 10.0;
              }
              break;
            case 1:
              // x(.)xxxxxx
              if (receivedChars[1] == '.') {
                break;
              }
              // x(x).xxxxx
              else if (receivedChars[2] == '.') {
                latitude += float(receivedChars[i] - '0');
              }
              break;
            case 2:
              // x.(x)xxxxx
              if (receivedChars[1] == '.') {
                latitude += float(receivedChars[i] - '0') / 10.0;
              }
              // xx(.)xxxxx
              else if (receivedChars[2] == '.') {
                break;
              }
              break;
            case 3:
              // x.x(x)xxxx
              if (receivedChars[1] == '.') {
                latitude += float(receivedChars[i] - '0') / 100.0;
              }
              // xx.(x)xxxx
              else if (receivedChars[2] == '.') {
                latitude += float(receivedChars[i] - '0') / 10.0;
              }
              break;
            case 4:
              // x.xx(x)xxx
              if (receivedChars[1] == '.') {
                latitude += float(receivedChars[i] - '0') / 1000.0;
              }
              // xx.x(x)xxx
              else if (receivedChars[2] == '.') {
                latitude += float(receivedChars[i] - '0') / 100.0;
              }
              break;
            case 5:
              // x.xxx(x)xx
              if (receivedChars[1] == '.') {
                latitude += float(receivedChars[i] - '0') / 10000.0;
              }
              // xx.xx(x)xx
              else if (receivedChars[2] == '.') {
                latitude += float(receivedChars[i] - '0') / 1000.0;
              }
              break;
            case 6:
              // x.xxxx(x)x
              if (receivedChars[1] == '.') {
                latitude += float(receivedChars[i] - '0') / 100000.0;
              }
              // xx.xxx(x)x
              else if (receivedChars[2] == '.') {
                latitude += float(receivedChars[i] - '0') / 10000.0;
              }
              break;
            case 7:
              // x.xxxxx(x)
              if (receivedChars[1] == '.') {
                latitude += float(receivedChars[i] - '0') / 1000000.0;
              }
              // xx.xxxx(x)
              else if (receivedChars[2] == '.') {
                latitude += float(receivedChars[i] - '0') / 100000.0;
              }
              break;
          }
        }
        Serial.print("Latitude (degrees): ");
        Serial.println(latitude);
      }
      else {
        Serial.println("Date incoming...");
        // for each element in the array
        for (int i = 0; i < 8; i++) {
          // change the character element into an integer and place it into the respective place
          switch (i) {
            case 0:
              Day = (receivedChars[i] - '0') * 10;
              break;
            case 1:
              Day += (receivedChars[i] - '0');
              break;
            case 2:
              Month = (receivedChars[i] - '0') * 10;
              break;
            case 3:
              Month += (receivedChars[i] - '0');
              break;
            case 4:
              Year = (receivedChars[i] - '0') * 1000;
              break;
            case 5:
              Year += (receivedChars[i] - '0') * 100;
              break;
            case 6:
              Year += (receivedChars[i] - '0') * 10;
              break;
            case 7:
              Year += (receivedChars[i] - '0');
              break;
          }
        }
        
        Serial.print(Day); Serial.print("/"); Serial.print(Month); Serial.print("/");
        Serial.println(Year);

        // calculate the number of days since Jan 1st UTC based on the month and days
        switch (Month) {
          case 1:
            daysSinceJan1st = Day - 1;
            break;
          case 2:
            daysSinceJan1st = JANUARY + Day - 1;
            break;
          case 3:
            daysSinceJan1st = JANUARY + FEBRUARY + Day - 1;
            break;
          case 4:
            daysSinceJan1st = JANUARY + FEBRUARY + MARCH + Day - 1;
            break;
          case 5:
            daysSinceJan1st = JANUARY + FEBRUARY + MARCH + APRIL + Day - 1;
            break;
          case 6:
            daysSinceJan1st = JANUARY + FEBRUARY + MARCH + APRIL + MAY + Day - 1;
            break;
          case 7:
            daysSinceJan1st = JANUARY + FEBRUARY + MARCH + APRIL + MAY + JUNE + Day - 1;
            break;
          case 8:
            daysSinceJan1st = JANUARY + FEBRUARY + MARCH + APRIL + MAY + JUNE + JULY + Day - 1;
            break;
          case 9:
            daysSinceJan1st = JANUARY + FEBRUARY + MARCH + APRIL + MAY + JUNE + JULY + AUGUST + Day - 1;
            break;
          case 10:
            daysSinceJan1st = JANUARY + FEBRUARY + MARCH + APRIL + MAY + JUNE + JULY + AUGUST + SEPTEMBER + Day - 1;
            break;
          case 11:
            daysSinceJan1st = JANUARY + FEBRUARY + MARCH + APRIL + MAY + JUNE + JULY + AUGUST + SEPTEMBER + OCTOBER + Day - 1;
            break;
          case 12:
            daysSinceJan1st = JANUARY + FEBRUARY + MARCH + APRIL + MAY + JUNE + JULY + AUGUST + SEPTEMBER + OCTOBER + NOVEMBER + Day - 1;
            break;
        }
        Serial.print("Days since Jan 1st: ");
        Serial.println(daysSinceJan1st);
      }
    }
    else if (numberOfBytes == 7) {
      if ((receivedChars[1] == '.') || (receivedChars[2] == '.') 
          || (receivedChars[3] == '.')) {
                  
        Serial.println("Latitude incoming...");
        // go through each element and convert the array into a float
        for (int i = 0; i < numberOfBytes; i++) {
          switch (i) {
            case 0:
              // (x).xxxxxx
              if (receivedChars[1] == '.') {
                latitude = float(receivedChars[i] - '0');
              }
              // (x)x.xxxxx
              else if (receivedChars[2] == '.') {
                latitude = float(receivedChars[i] - '0') * 10.0;
              }
              break;
            case 1:
              // x(.)xxxxxx
              if (receivedChars[1] == '.') {
                break;
              }
              // x(x).xxxxx
              else if (receivedChars[2] == '.') {
                latitude += float(receivedChars[i] - '0');
              }
              break;
            case 2:
              // x.(x)xxxxx
              if (receivedChars[1] == '.') {
                latitude += float(receivedChars[i] - '0') / 10.0;
              }
              // xx(.)xxxxx
              else if (receivedChars[2] == '.') {
                break;
              }
              break;
            case 3:
              // x.x(x)xxxx
              if (receivedChars[1] == '.') {
                latitude += float(receivedChars[i] - '0') / 100.0;
              }
              // xx.(x)xxxx
              else if (receivedChars[2] == '.') {
                latitude += float(receivedChars[i] - '0') / 10.0;
              }
              break;
            case 4:
              // x.xx(x)xxx
              if (receivedChars[1] == '.') {
                latitude += float(receivedChars[i] - '0') / 1000.0;
              }
              // xx.x(x)xxx
              else if (receivedChars[2] == '.') {
                latitude += float(receivedChars[i] - '0') / 100.0;
              }
              break;
            case 5:
              // x.xxx(x)xx
              if (receivedChars[1] == '.') {
                latitude += float(receivedChars[i] - '0') / 10000.0;
              }
              // xx.xx(x)xx
              else if (receivedChars[2] == '.') {
                latitude += float(receivedChars[i] - '0') / 1000.0;
              }
              break;
            case 6:
              // x.xxxx(x)x
              if (receivedChars[1] == '.') {
                latitude += float(receivedChars[i] - '0') / 100000.0;
              }
              // xx.xxx(x)x
              else if (receivedChars[2] == '.') {
                latitude += float(receivedChars[i] - '0') / 10000.0;
              }
              break;
          }
        }
        Serial.print("Latitude (degrees): ");
        Serial.println(latitude);
      }
    }
    // of the size of the character array is six bytes, then it is HHMMSS
    else if (numberOfBytes == 6) {
      Serial.println("Time incoming...");
      for (int i = 0; i < 6; i++) {
        switch (i) {
          case 0:
            Hour = (receivedChars[i] - '0') * 10;
            break;
          case 1:
            Hour += (receivedChars[i] - '0');
            break;
          case 2:
            Minute = (receivedChars[i] - '0') * 10;
            break;
          case 3:
            Minute += (receivedChars[i] - '0');
            break;
          case 4:
            Second = (receivedChars[i] - '0') * 10;
            break;
          case 5:
            Second += (receivedChars[i] - '0');
            break;
        }
      }
      Serial.print(Hour); Serial.print(":"); Serial.print(Minute); Serial.print(":");
      Serial.println(Second);

      // calculate the LST for use in the solar hour angle formula:
      localSolarTime = float(Hour) + (float(Minute) / 60.0);
    }
    // else a manual mode/auto mode, manual height, or horizontal range packet was sent.
    else {
      if (receivedChars[0] == '0' && manualMode == 1) {
        manualHeight = 0;
      }
      else if (receivedChars[0] == '1') {
        if (receivedChars[1] == '0') {
          if (receivedChars[2] == '0') {
            horizontalRange = 100;
            Serial.print("Horizontal Range = ");
            Serial.println(horizontalRange);
          }
        }
        
        else if (manualMode == 1) {
          manualHeight = 1;
        }
      }
      
      else if (receivedChars[0] == '2' && manualMode == 1) {
        manualHeight = 2;
      }
      else if (receivedChars[0] == '3' && manualMode == 1) {
        manualHeight = 3;
      }
      else if (receivedChars[0] == '4' && manualMode == 1) {
        manualHeight = 4;
      }
      
      else if (receivedChars[0] == '5') {
        if (receivedChars[1] == '0') {
          horizontalRange = 50;
          Serial.print("Horizontal Range = ");
          Serial.println(horizontalRange);
        }
        else if (manualMode == 1) {
          manualHeight = 5;
        }
      }
      
      else if (receivedChars[0] == '6') {
        if (receivedChars[1] == '0') {
          horizontalRange = 60;
          Serial.print("Horizontal Range = ");
          Serial.println(horizontalRange);
        }
        else if (manualMode == 1) {
          manualHeight = 6;
        }
      }
      
      else if (receivedChars[0] == '7') {
        if (receivedChars[1] == '0') {
          horizontalRange = 70;
          Serial.print("Horizontal Range = ");
          Serial.println(horizontalRange);
        }
        else {
          autoMode = 1;
          manualMode = 0;
          Serial.println("Auto Height Mode Activated");
        }
      }
      
      else if (receivedChars[0] == '8') {
        if (receivedChars[1] == '0') {
          horizontalRange = 80;
          Serial.print("Horizontal Range = ");
          Serial.println(horizontalRange);
        }
        
        else {
          autoMode = 0;
          manualMode = 1;
          Serial.println("Manual Height Mode Activated");
        }
      }
      
      else if (receivedChars[0] == '9') {
        horizontalRange = 90;
        Serial.print("Horizontal Range = ");
        Serial.println(horizontalRange);
      }
      
      if (manualMode == 1) {
        Serial.print("Manual Height = ");
        Serial.println(manualHeight);
      }
    }

    // set the new data boolean to false before exiting
    newData = false;
    
  }
}


// need
void visorMovement(int altitude) {
  // if manual mode is activated:
  if (manualMode == 1) {
    Serial.print("Visor Height: "); Serial.print(manualHeight * 60);
    Serial.println(" inches from the bottom of the enclosure.");
  }
  // if auto mode is activated:
  else if (autoMode == 1) {
    // if the new altitude is different:
    if (oldAltitude != altitude) {
      // as altitude increases, decrease the length of the visor from the bottom
      // of the track enclosure:
      // minAltitude = ? = sunrise/sunset angle (how to find?)
      int nextPos = map(altitude, MIN_ALTITUDE, maxAltitude, 0, (6 * INCH_STEPS));
      Serial.print("Visor Height: "); Serial.print(nextPos);
      Serial.println(" inches from the bottom of the enclosure.");
      
      // move the visor to the next position:
      // Visor_Stepper.runToPosition();
      oldAltitude = altitude;
    }
    else {
      return;
    }   
  }
}

// need
int calculateAltitude() {
  // altitude = sin^(-1) * (sin(latitude)*sin(declination angle)
  // + cos(latitude)*cos(declination angle)*cos(solar hour angle))

  if (latitude > 0 && (latitude != oldLatitude)) {
    // first, find the declination angle of the sun (in radians):
    // https://solarsena.com/solar-declination-angle-calculator/
    float declinationAngle = (sin(-23.44 * PI/180.0) * cos(360.0/365.0 * (float(daysSinceJan1st) + 10.0)));
    Serial.print("Declination angle (radians) = "); Serial.println(declinationAngle);

    // then, find the maximum altitude for the day:
    float maxAltitude = 90.0 - latitude + (declinationAngle * 180.0/PI);
    Serial.print("Maximum altitude for the day: "); Serial.println(maxAltitude);
    
    // then, find the solar hour angle (in radians):
    // https://solarsena.com/solar-hour-angle-calculator-formula/
    float solarHourAngle = (15.0 * (localSolarTime - 12.0)) * (PI/180.0);
    Serial.print("Solar hour angle (radians) = "); Serial.println(solarHourAngle);

    // finally, we can find the altitude of the sun (in degrees):
    // https://solarsena.com/solar-elevation-angle-altitude/
    float altitude = (asin(sin(latitude * PI/180) * sin(declinationAngle) + cos(latitude * PI/180) * cos(declinationAngle) * cos(solarHourAngle))) * (180.0/PI);

    Serial.print("Altitude (degrees) = "); Serial.println(altitude);
  
    return altitude;

    oldLatitude = latitude;
  }
  else {
    return 0;
  }
}
