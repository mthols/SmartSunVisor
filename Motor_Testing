// NOT COMPLETE

#include <Arduino.h>
#include "SyncDriver.h"
#include "DRV8825.h"    //https://github.com/laurb9/StepperDriver, https://microcontrollerslab.com/drv8825-stepper-motor-driver-esp32-tutorial/

// using a 200-step motor
#define MOTOR_STEPS 200
// different RPM speeds
#define NORMAL_RPM 120
#define FAST_RPM 240
// stepper pins
#define DIR_1 16
#define STEP_1 17
#define DIR_2 5
#define STEP_2 18
#define DIR_3 22
#define STEP_3 23
// set microsteps to 1:full step, 2:half step...must match configuration set on physical pins M0, M1, and M2
#define MICROSTEPS 1
// this is the avg. # of steps it takes for the carriage assembly to get from end to end
#define MAX_STEPS 2417

#define RIGHT_MIN 900
#define RIGHT_MAX 925
#define LEFT_MIN 1700
#define LEFT_MAX 1750

// limit switch pins
#define LS1 13    // left
#define LS2 19    // right

// make stepper motor objects
DRV8825 Track_Stepper_Right(MOTOR_STEPS, DIR_1, STEP_1);
DRV8825 Track_Stepper_Left(MOTOR_STEPS, DIR_2, STEP_2);
DRV8825 Visor_Stepper(MOTOR_STEPS, DIR_3, STEP_3);
SyncDriver Track_Steppers(Track_Stepper_Left, Track_Stepper_Right);

// motor globals
int newDirection = 0;
int currentDirection = 1;
int stepCounter = 0;
int currentPosition = 0;
int newPosition = 0;
// limit switch state globals
bool LS1_Value = true;
bool LS2_Value;


void setup() {
  // start serial
  Serial.begin(115200);
  
  // give the limit switches pullup resistors
  pinMode(LS1, INPUT_PULLUP);
  pinMode(LS2, INPUT_PULLUP);

  // set each stepper RPM and microstepping
  Track_Stepper_Right.begin(NORMAL_RPM, MICROSTEPS);
  Track_Stepper_Left.begin(NORMAL_RPM, MICROSTEPS);
  Visor_Stepper.begin(NORMAL_RPM, MICROSTEPS);

  //initialize the carriages at home (far left)
  homeCarriages();
  Serial.println("Carriages homed");
}


void loop() {
  // need to slow following carriage when between 
  if (Serial.available()) {
    int pendingPosition = Serial.parseInt();
    if (pendingPosition > 0 && pendingPosition <= MAX_STEPS) {
      newPosition = pendingPosition;
      Serial.print("New position = ");
      Serial.println(newPosition);
    }
    horizontalMove();
  }
}


void homeCarriages() {
  // read the value of the left limit switch, which will be HIGH unless the carriage hits it, 
  // so go left until it does hit it so it can home in.
  Serial.print("LS1 = ");
  Serial.println(LS1_Value);
  Track_Stepper_Left.setRPM(30);
  Track_Stepper_Right.setRPM(30);
  while (LS1_Value == true) {
    Track_Steppers.move(-MICROSTEPS, -MICROSTEPS);
    Serial.println("Homing...");
    LS1_Value = digitalRead(LS1);
    Serial.print("LS1 = ");
    Serial.println(LS1_Value);
  }
  Track_Stepper_Left.setRPM(NORMAL_RPM);
  Track_Stepper_Right.setRPM(NORMAL_RPM);
}


// this function is for moving the two track motors according to the previously calculated
// azimuth value, mapped to the...
void horizontalMove() {
  // the next move will be the difference between the new and last positions
  // (units = steps)
  int nextMove = newPosition - currentPosition;
  Serial.print("Next move = ");
  Serial.print(nextMove);
  Serial.println(" steps");
  
  // move the track steppers the appropriate amount of steps from the last position,
  // stop moving if a limit switch is tripped
  //if ((LS1_Value == false) && (LS2_Value == false)) {
  for (int i = 0; (i <= (abs(nextMove))); i++) {
    // if going left
    if (nextMove < 0) {
      if ((currentPosition > RIGHT_MIN) && (currentPosition <= RIGHT_MAX)) {
        Serial.println("Right stepper is faster...");
        Track_Steppers.move(-MICROSTEPS, -MICROSTEPS * 6);
        currentPosition -= 1;
      }
      else if ((currentPosition > LEFT_MIN) && (currentPosition < LEFT_MAX)) {
        Serial.println("Left stepper is faster...");
        Track_Steppers.move(-MICROSTEPS * 6, -MICROSTEPS);
        currentPosition -= 6;
        i -= 5;
      }
      else {
        Track_Steppers.move(-MICROSTEPS, -MICROSTEPS);
        currentPosition -= 1;
      }
    }
    // if going right
    else if (nextMove > 0) {
      if ((currentPosition > RIGHT_MIN) && (currentPosition <= RIGHT_MAX)) {
        Serial.println("Right stepper is faster...");
        Track_Steppers.move(MICROSTEPS, MICROSTEPS * 6);
        currentPosition += 6;
        i += 5;
      }
      else if ((currentPosition > LEFT_MIN) && (currentPosition < LEFT_MAX)) {
        Serial.println("Left stepper is faster...");
        Track_Steppers.move(MICROSTEPS * 6, MICROSTEPS);
        currentPosition += 1;
      }
      else {
        Track_Steppers.move(MICROSTEPS, MICROSTEPS);
        currentPosition += 1;
      }
    }
    else {
      Serial.println("No move command given.");
      Track_Steppers.move(0, 0);
    }
    // check the limit switches
    LS1_Value = digitalRead(LS1);
    LS2_Value = digitalRead(LS2);
    // print the new current position
    Serial.print("Current position now = ");
    Serial.println(currentPosition);
  }
  // print the final current position when done moving
  Serial.print("Current position final = ");
  Serial.print(currentPosition);
  Serial.println(" steps from left");  
}
