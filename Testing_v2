// Acceleration Motor Testing + Bluetooth + App Height Conversion

#include <AccelStepper.h>
#include "BluetoothSerial.h"

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

BluetoothSerial SerialBT;

#define DIR_1 16
#define STEP_1 17
#define EN_1 4
#define DIR_2 5
#define STEP_2 18
#define EN_2 21
#define DIR_3 22
#define STEP_3 23
#define EN_3 12

// Define some steppers and the pins they will use
AccelStepper Track_Stepper_Right(AccelStepper::DRIVER, STEP_1, DIR_1); //right
AccelStepper Track_Stepper_Left(AccelStepper::DRIVER, STEP_2, DIR_2); //left
AccelStepper Visor_Stepper(AccelStepper::DRIVER, STEP_3, DIR_3); //visor

// when currentPosition < LEFT_BOUNDARY_FOR, both steppers are on.
// when LEFT_BOUNDARY_FOR <= currentPosition <= RIGHT_BOUNDARY_FOR, right stepper on.
// when currentPosition > RIGHT_BOUNDARY_FOR, left stepper is on.
#define LEFT_BOUNDARY_FOR 930
#define RIGHT_BOUNDARY_FOR 1900

// when currentPosition > RIGHT_BOUNDARY_REV_2, right stepper is on.
// when currentPosition > RIGHT_BOUNDARY_REV, left stepper is on.
// when LEFT_BOUNDARY_REV <= currentPosition <= RIGHT_BOUNDARY_REV, right stepper on.
// when currentPosition < LEFT_BOUNDARY_REV, both steppers are on.
#define RIGHT_BOUNDARY_REV_2 2400
#define RIGHT_BOUNDARY_REV 1400
#define LEFT_BOUNDARY_REV 750  

#define CHANGE_THRESHOLD 100

#define STEPS_TO_ZERO_DEGREES 2300
#define MAX_STEPS 2550
#define MOTOR_ACCEL 900
#define HOME_ACCEL 500
#define MAX_SPEED 800
#define CURVE_SPEED 400
#define HOME_SPEED 200

// number of steps in an inch
#define INCH_STEPS = 60

#define LS1 13    // left
#define LS2 19    // right

// globals for app...
int autoMode = 1;
int manualMode = 0;
int manualHeight = 0;
int horizontalRange = 100;
const byte numChars = 32;
char receivedChars[numChars]; // an array to store the received data
boolean newData = false;

// globals for limit switches...true = not pressed
bool LS1_Value = true;
bool LS2_Value = true;


void setup() {
  Serial.begin(115200);
  SerialBT.begin("SSVCompanion"); //start Bluetooth
  pinMode(LS1, INPUT_PULLUP);
  pinMode(LS2, INPUT_PULLUP);

  Track_Stepper_Right.setEnablePin(EN_1);
  Track_Stepper_Right.setPinsInverted(false, false, true);
  Track_Stepper_Right.enableOutputs();
  
  Track_Stepper_Left.setEnablePin(EN_2);
  Track_Stepper_Left.setPinsInverted(false, false, true);
  Track_Stepper_Left.enableOutputs();
  
  Visor_Stepper.setMaxSpeed(MAX_SPEED);
  Visor_Stepper.setAcceleration(MOTOR_ACCEL);
  Visor_Stepper.setEnablePin(EN_3);
  Visor_Stepper.setPinsInverted(false, false, true);
  Visor_Stepper.disableOutputs();

  homeCarriages();
  Serial.println("Carriages homed");
  homeVisor();
  Serial.println("Visor homed");

  // set the track motors' settings after being homed...
  Track_Stepper_Right.setMaxSpeed(MAX_SPEED);
  Track_Stepper_Left.setMaxSpeed(MAX_SPEED);
  Track_Stepper_Right.setAcceleration(MOTOR_ACCEL);
  Track_Stepper_Left.setAcceleration(MOTOR_ACCEL);

  Serial.println("Welcome to the SSV. Open the SSV app to pair over Bluetooth.");
  Serial.println("Initializing in Auto Mode...");
  Serial.print("Horizontal Range = "); Serial.print(horizontalRange);
  Serial.println("%");
  Serial.print("Visor Height = "); Serial.print(Visor_Stepper.currentPosition());
  Serial.println(" inches from the bottom of the enclosure.");
}


void loop() {
  //testing();
  //delay(100);
  //horizontalMove(mapAzimuth(getAzimuth()));
  recvWithEndMarker();
  convertAppSettings();
  visorMovement();
}


void testing() {
  if (Serial.available()) {
    // check if an azimuth value has been sent, and if so, make sure it is between 0 and
    // 360 degrees inclusive, and if so, set that as the new azimuth, and proceed.
    // replace Serial.peek() with getAzimuth() later.
    int pendingData = Serial.peek();
    // if 'd'
    if (pendingData == 100) {
      Visor_Stepper.disableOutputs();
      Serial.read();
    }
    // if 'e'
    else if (pendingData == 101) {
      Visor_Stepper.enableOutputs();
      Serial.read();
      homeVisor();
    }
    // if the pending data is NOT the newline feed character
    else if (pendingData != 10) {
      int pendingAzimuth = Serial.parseInt();

      // if the pending azimuth is betwen 0 and 360 degrees
      if (pendingAzimuth >= 0 && pendingAzimuth <= 360) {
        Serial.print("New azimuth = ");
        Serial.print(pendingAzimuth);
        Serial.println(" degrees");
        // call this function to turn the azimuth value into a step value.
        int pendingNewPosition = mapAzimuth(pendingAzimuth);
        // then call this function to move the track motors.
        horizontalMove(pendingNewPosition);
      }
      else {
        Serial.println("Azimuth OOR");
      }
    }
  }
  else {
    //turn off motors to keep them cool as cucumbers...
    Track_Stepper_Right.disableOutputs();
    Track_Stepper_Left.disableOutputs();
  }
}


// work in progress
void horizontalMove(int newPosition) {

  // set new target positions...
  Track_Stepper_Right.moveTo(newPosition);
  Track_Stepper_Left.moveTo(newPosition);

  // need to change boundaries based on what direction it needs to go.
  int rightBoundary;
  int leftBoundary;
  int difference = newPosition - Track_Stepper_Right.currentPosition();
  Serial.print("Difference = ");
  Serial.println(difference);
  if (difference > 0) {       //if going right
    rightBoundary = RIGHT_BOUNDARY_FOR;
    leftBoundary = LEFT_BOUNDARY_FOR;
  }
  else if (difference < 0) {  //if going left
    rightBoundary = RIGHT_BOUNDARY_REV;
    leftBoundary = LEFT_BOUNDARY_REV;
  }
  
  // check the switches...
  readLimitSwitches();
  
  // if both switches aren't hit, the steppers are not at their target position,
  // and the absolute value of the difference is greater than the threshold value
  while ((LS1_Value && LS2_Value) 
      && (Track_Stepper_Left.distanceToGo() != 0) 
      && (Track_Stepper_Right.distanceToGo() != 0)
      && (abs(difference) > CHANGE_THRESHOLD)) {
    
    if (Track_Stepper_Right.currentPosition() < leftBoundary) {
      Track_Stepper_Right.enableOutputs();
      Track_Stepper_Left.enableOutputs();
      Visor_Stepper.enableOutputs();
      Track_Stepper_Right.setMaxSpeed(MAX_SPEED);
      Track_Stepper_Left.setMaxSpeed(MAX_SPEED);
      Serial.println("Step 1...");
    }
    
    while ((Track_Stepper_Right.currentPosition() < leftBoundary) 
          && (Track_Stepper_Left.distanceToGo() != 0)) {
      
      Track_Stepper_Right.run();    
      Track_Stepper_Left.run();
    }

    // when going around the curve, change the max speed to a low speed to 
    // avoid belt slipping.
    if ((Track_Stepper_Right.currentPosition() >= leftBoundary) 
        && (Track_Stepper_Right.currentPosition() <= rightBoundary)) {
      
      if (difference < 0) {
        Track_Stepper_Right.setMaxSpeed(MAX_SPEED);
        Track_Stepper_Left.setMaxSpeed(MAX_SPEED);
      }
      else if (difference > 0) {
        Track_Stepper_Right.setMaxSpeed(CURVE_SPEED);
        Track_Stepper_Left.setMaxSpeed(CURVE_SPEED);
      }
      Track_Stepper_Right.enableOutputs();
      Track_Stepper_Left.disableOutputs();
      Visor_Stepper.disableOutputs();
      Serial.println("Step 2...");
    }
 
    while ((Track_Stepper_Right.currentPosition() >= leftBoundary) 
            && (Track_Stepper_Right.currentPosition() <= rightBoundary) 
            && (Track_Stepper_Right.distanceToGo() != 0)) {
      
      Track_Stepper_Right.run();
      Track_Stepper_Left.run();
    }

    if ((Track_Stepper_Right.currentPosition() > RIGHT_BOUNDARY_REV_2)
          && (difference < 0)) {
      Track_Stepper_Right.enableOutputs();
      Track_Stepper_Left.disableOutputs();
      Visor_Stepper.enableOutputs();
      Track_Stepper_Right.setMaxSpeed(MAX_SPEED);
      Track_Stepper_Left.setMaxSpeed(MAX_SPEED);
      Serial.println("Step 3...");
    }
    
    while ((Track_Stepper_Right.currentPosition() > RIGHT_BOUNDARY_REV_2)
          && (difference < 0) && (Track_Stepper_Right.distanceToGo() != 0)) {
      
      Track_Stepper_Right.run();
      Track_Stepper_Left.run();
    }

    if (Track_Stepper_Right.currentPosition() > rightBoundary) {
      Track_Stepper_Right.disableOutputs();
      Track_Stepper_Left.enableOutputs();
      Visor_Stepper.enableOutputs();
      Track_Stepper_Right.setMaxSpeed(MAX_SPEED);
      Track_Stepper_Left.setMaxSpeed(MAX_SPEED);
      Serial.println("Step 4...");
    }
    
    while ((Track_Stepper_Right.currentPosition() > rightBoundary) 
          && (Track_Stepper_Left.distanceToGo() != 0)) {
      
      Track_Stepper_Right.run();
      Track_Stepper_Left.run();
    }
    
    //check the switches...
    readLimitSwitches();
  }

  // if the left switch is hit, move right a little, and set the current position
  // as the new zero position.
  if (!LS1_Value) {
    Serial.println("Left Switch Hit!");
    Track_Stepper_Right.disableOutputs();
    Track_Stepper_Left.enableOutputs();
    Track_Stepper_Left.move(5);
    Track_Stepper_Left.runToPosition();
    //Track_Stepper_Left.runToNewPosition(5); //not sure if absolute or relative pos
    Track_Stepper_Right.setCurrentPosition(0);
    Track_Stepper_Left.setCurrentPosition(0);
    //need to figure out
  }
  
  // if the right switch is hit, move left a little, and set the current position
  // as the new max position.
  else if (!LS2_Value) {
    Serial.println("Right Switch Hit!");
    Track_Stepper_Right.enableOutputs();
    Track_Stepper_Left.disableOutputs();
    Track_Stepper_Right.move(-5);
    Track_Stepper_Right.runToPosition();
    //Track_Stepper_Right.runToNewPosition(-5); //not sure if absolute or relative pos
    Track_Stepper_Right.setCurrentPosition(MAX_STEPS);
    Track_Stepper_Left.setCurrentPosition(MAX_STEPS);
    //need to figure out
  }

  // print the final position...
  Serial.print("Current position final = ");
  Serial.print(Track_Stepper_Left.currentPosition()); Serial.print(", ");
  Serial.print(Track_Stepper_Right.currentPosition());
  Serial.println(" steps from left");
}


// works
void homeCarriages() {
  // read the value of the left limit switch, which will be HIGH unless the carriage hits it, 
  // so go left until it does hit it so it can home in.
  delay(100);

  // set motor homing settings...
  Track_Stepper_Right.move(-MAX_STEPS);
  Track_Stepper_Left.move(-MAX_STEPS);
  Track_Stepper_Right.setMaxSpeed(HOME_SPEED);
  Track_Stepper_Left.setMaxSpeed(HOME_SPEED);
  Track_Stepper_Right.setAcceleration(HOME_ACCEL);
  Track_Stepper_Left.setAcceleration(HOME_ACCEL);
  
  Serial.println("Homing...");
  
  while (LS1_Value) {
    Track_Stepper_Left.run();
    Track_Stepper_Right.run();
    LS1_Value = digitalRead(LS1);
  }
  
  Track_Stepper_Left.move(5);
  Track_Stepper_Right.move(5);
  Serial.println("Correcting...");
  
  while (!LS1_Value) {
    Track_Stepper_Left.run();
    Track_Stepper_Right.run();
    LS1_Value = digitalRead(LS1);
  }
  // reset their home position here as zero.
  Track_Stepper_Right.setCurrentPosition(0);
  Track_Stepper_Left.setCurrentPosition(0);
}


// works
void homeVisor() {
  Visor_Stepper.enableOutputs();
  Visor_Stepper.move(-442);
  while (Visor_Stepper.currentPosition() != -442) {
    Visor_Stepper.run();
  }
  Visor_Stepper.setCurrentPosition(0);
}


// works
void readLimitSwitches() {
  LS1_Value = digitalRead(LS1);
  LS2_Value = digitalRead(LS2);
  //Serial.print("LS1 = ");
  //Serial.println(LS1_Value);
  //Serial.print("LS2 = ");
  //Serial.println(LS2_Value);
}


// works AFAIK
int mapAzimuth(int newAzimuth) {
  // Note: 225-360/0-45 degrees is the approx. usable range that the track covers, meaning 
  // that azimuth > 45 and azimuth < 225 degrees is a deadzone, and half of it goes to far left,
  // while the other half goes to the far right.
  int newPos;
  if ((newAzimuth >= 0) && (newAzimuth <= 45)) {
    // map new azimuth value to the appropriate steps from the left, and round to the
    // nearest hundred. 
    newPos = map(newAzimuth, 0, 45, STEPS_TO_ZERO_DEGREES, MAX_STEPS);
    Serial.print("New position = ");
    Serial.println(newPos);
  }
  else if ((newAzimuth >= 225) && (newAzimuth <= 360)) {
    // map new azimuth value to the appropriate steps from the left, and round to the
    // nearest hundred.
    newPos = map(newAzimuth, 225, 360, 0, STEPS_TO_ZERO_DEGREES);
    Serial.print("New position = ");
    Serial.println(newPos);
  }
  else if ((newAzimuth > 45) && (newAzimuth <= 90)) {
    newPos = MAX_STEPS;
    Serial.print("New position = ");
    Serial.println(newPos);
  }
  else if ((newAzimuth > 180) && (newAzimuth < 225)) {
    newPos = 0;
    Serial.print("New position = ");
    Serial.println(newPos);
  }
  else {
    Serial.println("Azimuth OOR");
    newPos = Track_Stepper_Right.currentPosition();
  }
  return newPos;
}


// works AFAIK
float getAzimuth () {
  //read cells
  int one = analogRead(34);
  int two = analogRead(35);
  int three = analogRead(32);
  int four = analogRead(33);
  int five = analogRead(25);
  int six = analogRead(26);
  int seven = analogRead(14);
  int eight = analogRead(27);

  //add up the readings from the cells facing the same directions.
  float north = three + five; //0 degrees
  float east = one + seven;   //90 degrees
  float south = four + six;   //180 degrees
  float west = two + eight;   //270 degrees
  float azimuthDegrees;
  
  // make sure not all of them are zeroes (unconnected)
  if ((north > 0) || (east > 0) || (south > 0) || (west > 0)) {
    if (north > south){                               // if the north value is greater than the south value,
      if (east > west){                               // AND if the east value is greater than the west value,
        if (north > east){                            // AND if the north value is greater than the east value,
          azimuthDegrees = (east/north) * 90;         // the azimuth must be 0 degrees north plus the smaller pull to the east.
        }
        else {                                        // else, the east value is greater than the north value,
          azimuthDegrees = 90 - ((north/east) * 90);  // so the azimuth must be 90 degrees east, minus the smaller pull to the north.
        }
      }
      else {                                          // else, the west value is greater than the east value (but north > south still),
        if (north > west){                            // AND the north value is greater than the west value,
          azimuthDegrees = 360 - ((west/north) * 90); // the azimuth must be 360 (or 0) degrees north minus the smaller pull to the west.
        }
        else {                                        // else, the west value is greater than the north value,
          azimuthDegrees = 270 + ((north/west) * 90); // the azimuth must be 270 degrees west plus the smaller pull to the north.
        }
      }
    }
    else {                                            // else, the south value is greater than the north value,
      if (east > west){                               // AND the east value is greater than the west value,
        if (south > east){                            // AND the south value is greater than the east value,
          azimuthDegrees = 180 - ((east/south) * 90); // the azimuth must be 180 degrees south minus the smaller pull to the east.
        }
        else {                                        // else, the east value is greater than the south value,
          azimuthDegrees = 90 + ((south/east) * 90);  // the azimuth must be 90 degrees east plus the smaller pull to the south.
        }
      }
      else {                                          // else the west value is greater than the east value,
        if (south > west) {                           // AND the south value is greater than the west value,
          azimuthDegrees = 180 + ((west/south) * 90); // the azimuth must be 180 degrees south plus the smaller pull to the west.
        }
        else {                                        // else the west value is greater than the south value,
          azimuthDegrees = 270 - ((south/west) * 90); // the azimuth must be 270 degrees west minus the smaller pull to the south.
        }
      }
    }
    Serial.print("Azimuth = ");
    Serial.println(azimuthDegrees);
    return azimuthDegrees;
  }
  else {
    Serial.print("North = ");
    Serial.print(north);
    Serial.print(", ");
    Serial.print("East = ");
    Serial.print(east);
    Serial.print(", ");
    Serial.print("South = ");
    Serial.print(south);
    Serial.print(", ");
    Serial.print("West = ");
    Serial.println(west);
    Serial.println("Is the sensor apparatus connected?");
    return 500;
  }
}


// function to get the input from the app.
void recvWithEndMarker() {
  static byte ndx = 0;
  char endMarker = '\n';
  char rc;
 
  if (SerialBT.available() > 0) {
    rc = SerialBT.read();

    if (rc != endMarker) {
      receivedChars[ndx] = rc;
      ndx++;
      if (ndx >= numChars) {
          ndx = numChars - 1;
      }
    }
    else {
      receivedChars[ndx] = '\0'; // terminate the string
      for (int i = 0; i < ndx; i++) {
        Serial.print(receivedChars[i]);
      }
      Serial.println();
      ndx = 0;
      newData = true;
    }
  }
}


// function to convert the input from the app to data we can use (Auto or Manual mode, 
// horizontal range, and manual height values).
void convertAppSettings() {
  if (newData == true) {
    // if the size of the character array is eight bytes, then it is DDMMYYYY
    if (sizeof(receivedChars) == 8) {
      // for each element in the array
      for (int i = 0; i < 8; i++) {
        // change the character element into an integer and place it into the respective place
        switch (i) {
          case 0:
            Day = (receivedChars[i] - '0') * 10;
            break;
          case 1:
            Day += (receivedChars[i] - '0');
            break;
          case 2:
            Month = (receivedChars[i] - '0') * 10;
            break;
          case 3:
            Month += (receivedChars[i] - '0');
            break;
          case 4:
            Year = (receivedChars[i] - '0') * 1000;
            break;
          case 5:
            Year += (receivedChars[i] - '0') * 100;
            break;
          case 6:
            Year += (receivedChars[i] - '0') * 10;
            break;
          case 7:
            Year += (receivedChars[i] - '0');
            break;
        }
      }
    }
    // of the size of the character array is six bytes, then it is HHMMSS
    else if (sizeof(receivedChars == 6)) {
      for (int i = 0; i < 6; i++) {
        switch (i) {
          case 0:
            Hour = (receivedChars[i] - '0') * 10;
            break;
          case 1:
            Hour += (receivedChars[i] - '0');
            break;
          case 2:
            Minute = (receivedChars[i] - '0') * 10;
            break;
          case 3:
            Minute += (receivedChars[i] - '0');
            break;
          case 4:
            Second = (receivedChars[i] - '0') * 10;
            break;
          case 5:
            Second += (receivedChars[i] - '0');
            break;
        }
      }
    }
    else {
      if (receivedChars[0] == '0' && manualMode == 1) {
        manualHeight = 0;
      }
      else if (receivedChars[0] == '1') {
        if (receivedChars[1] == '0') {
          if (receivedChars[2] == '0') {
            horizontalRange = 100;
            Serial.print("Horizontal Range = ");
            Serial.println(horizontalRange);
          }
        }
        else if (manualMode == 1) {
          manualHeight = 1;
        }
      }
      else if (receivedChars[0] == '2' && manualMode == 1) {
        manualHeight = 2;
      }
      else if (receivedChars[0] == '3' && manualMode == 1) {
        manualHeight = 3;
      }
      else if (receivedChars[0] == '4' && manualMode == 1) {
        manualHeight = 4;
      }
      else if (receivedChars[0] == '5') {
        if (receivedChars[1] == '0') {
          horizontalRange = 50;
          Serial.print("Horizontal Range = ");
          Serial.println(horizontalRange);
        }
        else if (manualMode == 1) {
          manualHeight = 5;
        }
      }
      else if (receivedChars[0] == '6') {
        if (receivedChars[1] == '0') {
          horizontalRange = 60;
          Serial.print("Horizontal Range = ");
          Serial.println(horizontalRange);
        }
        else if (manualMode == 1) {
          manualHeight = 6;
        }
      }
      else if (receivedChars[0] == '7') {
        if (receivedChars[1] == '0') {
          horizontalRange = 70;
          Serial.print("Horizontal Range = ");
          Serial.println(horizontalRange);
        }
        else {
          autoMode = 1;
          manualMode = 0;
          Serial.println("Auto Height Mode Activated");
        }
      }
      else if (receivedChars[0] == '8') {
        if (receivedChars[1] == '0') {
          horizontalRange = 80;
          Serial.print("Horizontal Range = ");
          Serial.println(horizontalRange);
        }
        else {
          autoMode = 0;
          manualMode = 1;
          Serial.println("Manual Height Mode Activated");
        }
      }
      else if (receivedChars[0] == '9') {
        horizontalRange = 90;
        Serial.print("Horizontal Range = ");
        Serial.println(horizontalRange);
      }
      
      if (manualMode == 1) {
        Serial.print("Manual Height = ");
        Serial.println(manualHeight);
      }
    }
    // set the new data boolean to false before exiting
    newData = false;
  }
}


// function to move the visor to the correct position.
// currently only has manual mode.
void visorMovement() {
  // if manual mode is activated:
  if ((manualMode == 1) && (Visor_Stepper.currentPosition() != (manualHeight * 60))) {
  
    Visor_Stepper.moveTo(manualHeight * 60);

    // run visor stepper until the distance from the current position and
    // target position are zero.
    while (Visor_Stepper.distanceToGo() != 0) {
      Visor_Stepper.run();
    }

    Serial.print("Visor Height: ");
    Serial.print(Visor_Stepper.currentPosition() / 60);
    Serial.println(" inches from the bottom of the enclosure.");
  }
}

int calculateAltitude(int) {
  // altitude = sin^(-1) * (sin(latitude)*sin(declination angle)
  // + cos(latitude)*cos(declination angle)*cos(solar hour angle))
  // first, find the declination angle of the sun...
  // https://solarsena.com/solar-declination-angle-calculator/
  float declinationAngle = sin(-23.44) * cos(360/365 * (daysSinceJan1stUTC + 10));

  // then, find the solar hour angle
  float solarHourAngle = 15 * (;
}
