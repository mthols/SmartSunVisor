// NOT COMPLETE

#include "SyncDriver.h"
#include "DRV8825.h"    //https://github.com/laurb9/StepperDriver, https://microcontrollerslab.com/drv8825-stepper-motor-driver-esp32-tutorial/

// using a 200-step motor
#define MOTOR_STEPS 200
// different RPM speeds
#define NORMAL_RPM 120
#define FAST_RPM 240
// stepper pins
#define DIR_1 16
#define STEP_1 17
#define EN_1 4
#define DIR_2 5
#define STEP_2 18
#define EN_2 21
#define DIR_3 22
#define STEP_3 23
// set microsteps to 1:full step, 2:half step...must match configuration set on physical pins M0, M1, and M2
#define MICROSTEPS 1
// this is the avg. # of steps it takes for the carriage assembly to get from end to end
#define MAX_STEPS 2500
// this is the # of steps it takes to get from the left end to the curve.
#define LEFT_STEPS 500
// these are the right and left boundaries (in # steps) used for switching between motors
#define RIGHT_BOUNDARY 2000
#define LEFT_BOUNDARY 1400

// limit switch pins
#define LS1 13    // left
#define LS2 19    // right

// make stepper motor objects
DRV8825 Track_Stepper_Right(MOTOR_STEPS, DIR_1, STEP_1, EN_1);
DRV8825 Track_Stepper_Left(MOTOR_STEPS, DIR_2, STEP_2, EN_2);
DRV8825 Visor_Stepper(MOTOR_STEPS, DIR_3, STEP_3);
SyncDriver Track_Steppers(Track_Stepper_Left, Track_Stepper_Right);

// motor globals
int newDirection = 0;
int currentDirection = 1;
int stepCounter = 0;
int currentPosition = 0;
int newPosition = 0;
bool rightStepperEnabled;
bool leftStepperEnabled;

// limit switch state globals
bool LS1_Value = true;
bool LS2_Value;

// sensor globals
int newAzimuth = 0;

void setup() {
  // start serial
  Serial.begin(115200);
  
  // give the limit switches pullup resistors
  pinMode(LS1, INPUT_PULLUP);
  pinMode(LS2, INPUT_PULLUP);

  // set each motor RPM and microstepping
  Track_Stepper_Right.begin(NORMAL_RPM, MICROSTEPS);
  Track_Stepper_Left.begin(NORMAL_RPM, MICROSTEPS);
  Visor_Stepper.begin(NORMAL_RPM, MICROSTEPS);

  // enables the track motors
  Track_Stepper_Right.setEnableActiveState(LOW);
  Track_Stepper_Left.setEnableActiveState(LOW);
  Track_Stepper_Right.enable();
  Track_Stepper_Left.enable();
  rightStepperEnabled = true;
  leftStepperEnabled = true;
  
  // initialize the carriages at home (far left)
  homeCarriages();
  Serial.println("Carriages homed");
}


void loop() {
  if (Serial.available()) {
    // check if an azimuth value has been sent, and if so, make sure it is between 0 and
    // 360 degrees inclusive, and if so, set that as the new azimuth, and proceed.
    int pendingData = Serial.peek();
    //Serial.print("Pending Data = ");
    //Serial.println(pendingData);
    if (pendingData != 10) {
      // if the pending data is between 0 and 9 (character) AKA 48 and 57 (decimal)
      int pendingAzimuth = Serial.parseInt();
      if (pendingAzimuth >= 0 && pendingAzimuth <= 360) {
        newAzimuth = pendingAzimuth;
        Serial.print("New azimuth = ");
        Serial.print(newAzimuth);
        Serial.println(" degrees");
        // call this function to turn the azimuth value into a step value.
        mapAzimuth();
        // then call this function to move the track motors.
        horizontalMove();
      }
    }
    else {
      // else there is nothing sent over serial, so disable the track motors.
      Track_Stepper_Right.disable();
      Track_Stepper_Left.disable();
      rightStepperEnabled = false;
      leftStepperEnabled = false;
    }
  }
  else {
    // else there is nothing sent over serial, so disable the track motors.
    Track_Stepper_Right.disable();
    Track_Stepper_Left.disable();
    rightStepperEnabled = false;
    leftStepperEnabled = false;
  }
}


void homeCarriages() {
  // read the value of the left limit switch, which will be HIGH unless the carriage hits it, 
  // so go left until it does hit it so it can home in.
  Serial.print("LS1 = ");
  Serial.println(LS1_Value);
  while (LS1_Value == true) {
    //Track_Stepper_Right.move(-MICROSTEPS);
    //Track_Stepper_Left.move(-MICROSTEPS);
    Track_Steppers.move(-MICROSTEPS, -MICROSTEPS);
    Serial.println("Homing...");
    LS1_Value = digitalRead(LS1);
    Serial.print("LS1 = ");
    Serial.println(LS1_Value);
  }
}


// this function is for moving the two track motors according to the previously calculated
// azimuth value
void horizontalMove() {
  // the next move will be the difference between the new and last positions
  // (units = steps)
  int nextMove = newPosition - currentPosition;
  Serial.print("Next move = ");
  Serial.print(nextMove);
  Serial.println(" steps");
  int multiplier = 100;
  // move the track steppers the appropriate amount of steps from the last position,
  // stop moving if a limit switch is tripped (switches not implemented yet).
  // if ((LS1_Value == false) && (LS2_Value == false)) {
  for (int i = 0; (i < (abs(nextMove))); i = i + multiplier) {
    if (nextMove > 0) {
      // if need to go right
      if (currentPosition >= RIGHT_BOUNDARY) {
        // if the current position is greater than or equal to the right boundary setting.
        if (leftStepperEnabled == false) {
          enableLeftStepper();
        }
        Serial.println("Left stepper is on...");
        Track_Stepper_Left.move(MICROSTEPS * multiplier);
      }
      else {
        if (rightStepperEnabled == false) {
          enableRightStepper();
        }
        Serial.println("Right stepper is on...");
        Track_Stepper_Right.move(MICROSTEPS * multiplier);
      }
      // add to the current position to get the new current position.
      currentPosition += multiplier;
    }
    else if (nextMove < 0) {
      // if need to go left
      if (currentPosition <= LEFT_BOUNDARY) {
        // if the current position is less than or equal to the left boundary setting.
        enableRightStepper();
        Serial.println("Right stepper is on...");
        Track_Stepper_Right.move(-MICROSTEPS * multiplier);
      }
      else {
        enableLeftStepper();
        Serial.println("Left stepper is on...");
        Track_Stepper_Left.move(-MICROSTEPS * multiplier);
      }
      // subtract from the current position to get the new current position.
      currentPosition -= multiplier;
    }
    // check the limit switches.
    LS1_Value = digitalRead(LS1);
    LS2_Value = digitalRead(LS2);
    // print the new current position.
    Serial.print("Current position now = ");
    Serial.println(currentPosition);
  }
  // print the final current position when done moving.
  Serial.print("Current position final = ");
  Serial.print(currentPosition);
  Serial.println(" steps from left");  
}


void enableRightStepper() {
  // if the right stepper is already enabled (and left is disabled), don't do anything.
  // else this configuration is not correct, so change it.
  if (rightStepperEnabled == true && leftStepperEnabled == false) {
    return;
  }
  else {
    Track_Stepper_Right.enable();
    Track_Stepper_Left.disable();
    rightStepperEnabled = true;
    leftStepperEnabled = false;
    Serial.println("Right stepper now enabled...");
  }
}

void enableLeftStepper() {
  // if the left stepper is already enabled (and right is disabled), don't do anything.
  // else this configuration is not correct, so change it.
  if (rightStepperEnabled == false && leftStepperEnabled == true) {
    return;
  }
  else {
    Track_Stepper_Right.disable();
    Track_Stepper_Left.enable();
    rightStepperEnabled = false;
    leftStepperEnabled = true;
    Serial.println("Left stepper now enabled...");
  }
}


void mapAzimuth() {
  // Note: 225-360/0-45 degrees is the approx. usable range that the track covers, meaning 
  // that azimuth > 45 and azimuth < 225 degrees is a deadzone that we cannot cover, and 
  // therefore, don't need to worry about.
  
    if (newAzimuth >= 0 && newAzimuth <= 45) {
      // map new azimuth value to the appropriate steps from the left, and round to the
      // nearest hundred. 
      newPosition = map(newAzimuth, 0, 45, LEFT_STEPS, MAX_STEPS);
      newPosition = 100 * ((newPosition + 50)/100);
      Serial.print("New position = ");
      Serial.println(newPosition);
    }
    else if (newAzimuth >= 225 && newAzimuth <= 360) {
      // map new azimuth value to the appropriate steps from the left, and round to the
      // nearest hundred.
      newPosition = map(newAzimuth, 225, 360, 0, LEFT_STEPS);
      newPosition = 100 * ((newPosition + 50)/100);
      Serial.print("New position = ");
      Serial.println(newPosition);
    }
    else {
      Serial.println("Azimuth OOR");
    }
}


//void countSteps() {
//  // this function allows the user to change the direction of the track motors or stop them
//  // entirely, it has only been tested by itself, and was used to count how many whole steps
//  // there are from one end of the track to the other for the carriage assembly to move.
//  if (Serial.available()) {
//    newDirection = Serial.parseInt();
//    // if a one is sent or the carriages hit the left
//    if ((newDirection == 1) || (LS1_Value == LOW)) {
//      currentDirection = 1;
//    }
//    // if a two is sent or the carriages hit the right
//    else if ((newDirection == 2) || (LS2_Value == LOW)) {
//      currentDirection = 2;
//    }
//    else if (newDirection == 3) {
//      currentDirection = 3;
//    }
//  }
//  
//  if (currentDirection == 1) {
//    Track_Steppers.move(MICROSTEPS, MICROSTEPS);
//    stepCounter += MICROSTEPS;
//  }
//  else if (currentDirection == 2) {
//    Track_Steppers.move(-MICROSTEPS, -MICROSTEPS);
//    stepCounter += MICROSTEPS;
//  }
//  else if (currentDirection == 3) {
//    Track_Steppers.move(0, 0);
//  }
//  else {
//    Track_Steppers.move(0, 0);
//  }
//  Serial.print("Steps = ");
//  Serial.println(stepCounter);
//  currentPosition = stepCounter;
//}
